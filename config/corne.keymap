/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB        &kp Q  &kp W  &kp E     &kp R  &kp T              &kp Y    &kp U  &kp I          &kp O    &kp P     &kp BSPC
&mt LCTRL ESC  &kp A  &kp S  &kp D     &kp F  &kp G              &kp H    &kp J  &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT      &kp Z  &kp X  &kp C     &kp V  &kp B              &kp N    &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp LEFT_ALT
                             &kp LGUI  &mo 1  &mt LCTRL SPACE    &kp RET  &mo 2  &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp EXCLAMATION  &kp AT_SIGN   &kp HASH          &kp DOLLAR    &kp PERCENT     &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT   &kp DOWN       &kp UP        &kp RIGHT             &trans                 &trans
&kp LSHFT   &kp LCTRL        &kp LEFT_ALT  &kp LEFT_COMMAND  &trans        &trans          &trans     &trans         &trans        &trans                &trans                 &trans
                                           &kp LGUI          &trans        &kp SPACE       &kp RET    &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9      &kp NUMBER_0       &kp BSPC
&kp LCTRL  &trans        &trans        &trans        &trans        &trans          &kp MINUS     &kp MINUS     &kp EQUAL     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE
&kp LSHFT  &trans        &trans        &trans        &trans        &trans          &kp UNDER     &kp PLUS      &kp LBRC      &kp RBRC          &kp PIPE           &kp TILDE
                                       &kp LGUI      &trans        &kp SPACE       &kp RET       &trans        &kp RALT
            >;
        };

        both {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans         &trans         &trans         &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(LC(H))  &kp LC(LG(J))  &kp LC(LG(K))  &kp LC(LG(L))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans         &trans         &trans         &trans         &trans  &trans
                        &trans  &trans  &trans    &trans         &trans         &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        if-both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
